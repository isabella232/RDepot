/**
 * R Depot
 *
 * Copyright (C) 2012-2018 Open Analytics NV
 *
 * ===========================================================================
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Apache License as published by
 * The Apache Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Apache License for more details.
 *
 * You should have received a copy of the Apache License
 * along with this program.  If not, see <http://www.apache.org/licenses/>
 */
package eu.openanalytics.rdepot.model;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;

// Generated Jun 24, 2013 12:33:03 PM by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.io.FilenameUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.core.io.FileSystemResource;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * Package generated by hbm2java
 */
@Entity
@Table(name = "package", schema = "public")
public class Package implements java.io.Serializable
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 8856556003759406171L;
	private int id;
	private String version;
	private Repository repository;
	private User user;
	private String name;
	private String description;
	private String author;
	private String depends = "";
	private String imports = "";
	private String suggests = "";
	private String systemRequirements = "";
	private String license;
	private String title;
	private String url = "";
	private String source;
	private String md5sum;

	private boolean active;
	private boolean deleted = false;
	private Set<Submission> submissions = new HashSet<Submission>(0);
	private Set<PackageEvent> packageEvents = new HashSet<PackageEvent>(0);
	
	@Transient
	private List<Vignette> vignettes;

	public Package()
	{
	}

	public Package(int id, Repository repository, User user, String name,
			String description, String author, String license, String source,
			String title, String md5sum, boolean active, boolean deleted)
	{
		this.id = id;
		this.repository = repository;
		this.user = user;
		this.name = name;
		this.description = description;
		this.author = author;
		this.license = license;
		this.title = title;
		this.source = source;
		this.active = active;
		this.deleted = deleted;
		this.md5sum = md5sum;
	}
	
	public Package(int id, Repository repository, User user, String name,
			String description, String author, String depends, String imports,
			String suggests, String systemRequirements, String license,
			String url, String source, String title, String md5sum, boolean active, boolean deleted,
			Set<Submission> submissions, Set<PackageEvent> packageEvents)
	{
		this.id = id;
		this.repository = repository;
		this.user = user;
		this.name = name;
		this.description = description;
		this.author = author;
		this.depends = depends;
		this.imports = imports;
		this.suggests = suggests;
		this.systemRequirements = systemRequirements;
		this.license = license;
		this.url = url;
		this.source = source;
		this.title = title;
		this.active = active;
		this.submissions = submissions;
		this.packageEvents = packageEvents;
		this.deleted = deleted;
		this.md5sum = md5sum;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	public int getId()
	{
		return this.id;
	}

	public void setId(int id)
	{
		this.id = id;
	}

	@Column(name = "version", nullable = false)
	public String getVersion()
	{
		return this.version;
	}

	public void setVersion(String version)
	{
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "repository_id", nullable = false)
	@JsonManagedReference
	public Repository getRepository()
	{
		return this.repository;
	}

	public void setRepository(Repository repository)
	{
		this.repository = repository;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "maintainer_id", nullable = false)
	@JsonManagedReference
	public User getUser()
	{
		return this.user;
	}

	public void setUser(User user)
	{
		this.user = user;
	}
	
	@Column(name = "active", nullable = false)
	public boolean isActive()
	{
		return this.active;
	}

	public void setActive(boolean active)
	{
		this.active = active;
	}
	
	@Column(name = "deleted", nullable = false)
	public boolean isDeleted()
	{
		return this.deleted;
	}

	public void setDeleted(boolean deleted)
	{
		this.deleted = deleted;
	}

	@Column(name = "name", nullable = false)
	public String getName()
	{
		return this.name;
	}

	public void setName(String name)
	{
		this.name = name;
	}

	@Column(name = "description", nullable = false)
	public String getDescription()
	{
		return this.description;
	}

	public void setDescription(String description)
	{
		this.description = description;
	}

	@Column(name = "author", nullable = false)
	public String getAuthor()
	{
		return this.author;
	}

	public void setAuthor(String author)
	{
		this.author = author;
	}

	@Column(name = "depends")
	public String getDepends()
	{
		return this.depends;
	}

	public void setDepends(String depends)
	{
		this.depends = depends;
	}

	@Column(name = "imports")
	public String getImports()
	{
		return this.imports;
	}

	public void setImports(String imports)
	{
		this.imports = imports;
	}

	@Column(name = "suggests")
	public String getSuggests()
	{
		return this.suggests;
	}

	public void setSuggests(String suggests)
	{
		this.suggests = suggests;
	}

	@Column(name = "system_requirements")
	public String getSystemRequirements()
	{
		return this.systemRequirements;
	}

	public void setSystemRequirements(String systemRequirements)
	{
		this.systemRequirements = systemRequirements;
	}

	@Column(name = "license", nullable = false)
	public String getLicense()
	{
		return this.license;
	}

	public void setLicense(String license)
	{
		this.license = license;
	}
	
	@Column(name = "title", nullable = false)
	public String getTitle()
	{
		return this.title;
	}
	
	@Column(name = "md5sum", nullable = false)
	public String getMd5sum() 
	{
		return md5sum;
	}

	public void setMd5sum(String md5sum) 
	{
		this.md5sum = md5sum;
	}

	public void setTitle(String title)
	{
		this.title = title;
	}

	@Column(name = "url")
	public String getUrl()
	{
		return this.url;
	}

	public void setUrl(String url)
	{
		this.url = url;
	}

	@Column(name = "source", nullable = false)
	public String getSource()
	{
		return this.source;
	}

	public void setSource(String source)
	{
		this.source = source;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "package")
	@JsonBackReference
	public Set<Submission> getSubmissions()
	{
		return this.submissions;
	}

	public void setSubmissions(Set<Submission> submissions)
	{
		this.submissions = submissions;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "package")
	public Set<PackageEvent> getPackageEvents()
	{
		return this.packageEvents;
	}

	public void setPackageEvents(Set<PackageEvent> packageEvents)
	{
		this.packageEvents = packageEvents;
	}
	
	@Override
	public String toString()
	{
		return this.name + " " + this.version;
 	}
	
	@Transient
	public List<Vignette> getVignettes()
	{
		if (this.vignettes == null)
		{
			File targzfile = new File(this.getSource());
			List<Vignette> vignettes = new ArrayList<>();
			if(targzfile != null && 
			   targzfile.exists() && 
			   targzfile.getParentFile() != null && 
			   targzfile.getParentFile().exists())
			{
				File vignettesFolder = new File(targzfile.getParent(), name + "/inst/doc");
				if(vignettesFolder != null && vignettesFolder.exists() && vignettesFolder.isDirectory())
				{
					File[] vignetteFiles = vignettesFolder.listFiles(new FilenameFilter() 
					{
						@Override
						public boolean accept(File dir, String name) 
						{
							return (name != null &&
									(name.toLowerCase().endsWith(".pdf") ||
									 name.toLowerCase().endsWith(".html")));
						}
					});
					for(File vignette : vignetteFiles)
					{
						switch(FilenameUtils.getExtension(vignette.getName().toLowerCase()))
						{
							case "html":
								try 
								{
									Document htmlDoc = Jsoup.parse(vignette, "UTF-8");
									vignettes.add(
										new Vignette(
											htmlDoc.title(), vignette.getName()));
									break;
								} 
								catch (IOException e) {}
							default:
								vignettes.add(
									new Vignette(
										FilenameUtils.getBaseName(vignette.getName()), vignette.getName()));
						}
					}
				}
			}
			this.vignettes = Collections.unmodifiableList(vignettes);
			return this.vignettes;
		}
		else
		{
			return this.vignettes;
		}
	}
	
	public byte[] readVignette(String fileName)
	{
		byte[] bytes = null;
		File vignette = new File(new File(this.getSource()).getParent(), this.getName() + "/inst/doc/" + fileName);
		if(vignette != null && vignette.exists())
		{
			FileSystemResource file = new FileSystemResource(vignette);
	    	try 
	    	{
				bytes = Files.readAllBytes(file.getFile().toPath());
			} 
	    	catch (IOException e) {}
		}
		return bytes;
	}
}
